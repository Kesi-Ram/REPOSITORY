import java.util.*;

class Edge implements Comparable<Edge> {
    String source, destination;
    int weight;

    public Edge(String source, String destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }

    @Override
    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

public class Kruskal {
    private Map<String, Integer> vertexMap; // Map to associate vertex names with indices
    private List<Edge> allEdges; // List of all edges in the graph
    private int[][] adjacencyMatrix; // Adjacency matrix representation
    private int maxNodeNumber; // Highest node number in the graph

    public Kruskal() {
        this.vertexMap = new HashMap<>();
        this.allEdges = new ArrayList<>();
        this.adjacencyMatrix = new int[1][1]; // Will be resized as needed
        this.maxNodeNumber = 0;
    }

    public void addEdge(String source, String destination, int weight) {
        // Add vertices to the map if they are not already present
        if (!vertexMap.containsKey(source)) {
            vertexMap.put(source, maxNodeNumber++);
        }
        if (!vertexMap.containsKey(destination)) {
            vertexMap.put(destination, maxNodeNumber++);
        }

        // Resize adjacency matrix if needed
        if (maxNodeNumber >= adjacencyMatrix.length) {
            int[][] newMatrix = new int[maxNodeNumber + 1][maxNodeNumber + 1];
            for (int i = 0; i < adjacencyMatrix.length; i++) {
                System.arraycopy(adjacencyMatrix[i], 0, newMatrix[i], 0, adjacencyMatrix[i].length);
            }
            adjacencyMatrix = newMatrix;
        }

        int sourceIndex = vertexMap.get(source);
        int destinationIndex = vertexMap.get(destination);
        
        allEdges.add(new Edge(source, destination, weight));
        adjacencyMatrix[sourceIndex][destinationIndex] = weight;
        adjacencyMatrix[destinationIndex][sourceIndex] = weight;
    }

    private int findParent(int[] parentNodes, int node) {
        if (parentNodes[node] != node) {
            parentNodes[node] = findParent(parentNodes, parentNodes[node]);
        }
        return parentNodes[node];
    }

    private void unionSets(int[] parentNodes, int[] ranks, int set1, int set2) {
        int root1 = findParent(parentNodes, set1);
        int root2 = findParent(parentNodes, set2);

        if (ranks[root1] < ranks[root2]) {
            parentNodes[root1] = root2;
        } else if (ranks[root1] > ranks[root2]) {
            parentNodes[root2] = root1;
        } else {
            parentNodes[root2] = root1;
            ranks[root1]++;
        }
    }

    public List<Edge> findMinimumSpanningTree() {
        List<Edge> minimumSpanningTree = new ArrayList<>();
        Collections.sort(allEdges);

        int[] parentNodes = new int[maxNodeNumber];
        int[] ranks = new int[maxNodeNumber];

        for (int node = 0; node < maxNodeNumber; node++) {
            parentNodes[node] = node;
            ranks[node] = 0;
        }

        int edgesAdded = 0;
        for (Edge edge : allEdges) {
            if (edgesAdded == maxNodeNumber - 1) break; // MST has nodes-1 edges

            int root1 = findParent(parentNodes, vertexMap.get(edge.source));
            int root2 = findParent(parentNodes, vertexMap.get(edge.destination));

            if (root1 != root2) {
                minimumSpanningTree.add(edge);
                unionSets(parentNodes, ranks, root1, root2);
                edgesAdded++;
            }
        }

        return minimumSpanningTree;
    }

    public void printAdjacencyMatrix() {
        System.out.println("\nAdjacency Matrix:");
        
        // Print column headers
        System.out.print("    "); // Space for row numbers
        for (String vertex : vertexMap.keySet()) {
            System.out.printf("%3s ", vertex);
        }
        System.out.println();
        
        // Print separator line
        System.out.print("  _");
        for (String vertex : vertexMap.keySet()) {
            System.out.print("____");
        }
        System.out.println();

        // Print matrix rows
        for (String vertex : vertexMap.keySet()) {
            int index = vertexMap.get(vertex);
            System.out.printf("%s | ", vertex);
            for (int j = 0; j < maxNodeNumber; j++) {
                System.out.printf("%2d  ", adjacencyMatrix[index][j]);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean continueRunning = true;

        while (continueRunning) {
            System.out.println("Enter three values for each edge: Vertex1 Vertex2 Value");
            System.out.println("Example: A B 5 will be formatted as (A, B, 5)");
            System.out.println("Enter -1 to stop adding edges");
            
            Kruskal graph = new Kruskal();
            
            while (true) {
                System.out.print("Edge: ");
                String input = scanner.nextLine().trim();
                
                if (input.equals("-1")) break;
                
                String[] parts = input.split("\\s+");
                
                if (parts.length != 3) {
                    System.out.println("Invalid format! Please enter three values separated by spaces");
                    continue;
                }
                
                try {
                    String source = parts[0];
                    String destination = parts[1];
                    int weight = Integer.parseInt(parts[2]);
                    System.out.printf("Formatted as: (%s, %s, %d)\n", source, destination, weight);
                    graph.addEdge(source, destination, weight);
                } catch (NumberFormatException e) {
                    System.out.println("Invalid numbers! Please enter valid integers.");
                }
            }

            if (graph.allEdges.isEmpty()) {
                System.out.println("No edges were entered. Please try again.");
                continue;
            }

            graph.printAdjacencyMatrix();

            List<Edge> mst = graph.findMinimumSpanningTree();
            int totalCost = 0;

            System.out.println("\nMinimum Spanning Tree Edges:");
            for (Edge edge : mst) {
                System.out.printf("(%s, %s, %d)\n", edge.source, edge.destination, edge.weight);
                totalCost += edge.weight;
            }

            // Sort the weights for display
            List<Integer> sortedWeights = new ArrayList<>();
            for (Edge edge : mst) {
                sortedWeights.add(edge.weight);
            }
            Collections.sort(sortedWeights);

            // Display horizontal calculation
            System.out.print("Minimum Cost: ");
            for (int i = 0; i < sortedWeights.size(); i++) {
                System.out.print(sortedWeights.get(i));
                if (i < sortedWeights.size() - 1) {
                    System.out.print(" + ");
                }
            }
            System.out.println(" = " + totalCost);

            System.out.print("\nTry again? (1=Yes, 0=No): ");
            continueRunning = scanner.nextInt() == 1;
            scanner.nextLine(); // Clear the buffer
        }
        scanner.close();
    }
}
